							LESSON PLAN  (100 min)

Docente:		Bruce D. Marron
Ciclo: 			25-2
Materia: 		Taller de Traducción Ingeniería y Adelantos Tecnológicos
Curso:			IT0629 
Licenciatura: 	Interpretación y  Traducción
Horario:		Martes 15:00 – 19:00; Jueves 19:00 – 21:00
Grupo:			6A



######################
HW_04.1	[Due: 25 Feb 2025]
Write How-To Guides in Spanish for 
	1) Installation of Notepad++ on Windows
		https://notepad-plus-plus.org/downloads/
		
	2) Setting up a GitHub account, obtaining a security token, and creating a repository
		https://github.com/
		https://docs.github.com/en/get-started/onboarding/getting-started-with-your-github-account
		https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-
		personal-access-tokens
		
	3) Installation of Git on Windows (Mac)
		https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
	
How-To Guides (aka a set of instructions) must be clear, simple, and direct. The 'step-by-step' method of organizing instructions is usually best. This assignment will use the following modified document format:
	* Name, Class ID, Assignment ID, and Date in upper RH corner
	
	* The three (3) How-To Guides will each have their own main section. Thus,
	The first main heading will be, 
		"How-To Guide for Installation of Notepad++ on Windows (en Español)"
	The second main heading will be, 
		"How-To Guide for Getting Started with GitHub (en Español)"
	The third heading will be, 
		"How-To Guide for Installation of Git for Windows (en Español)"
		
	* Under each main heading you may organize the instructions and hints as you wish; numerical list 
	format and single-space text is fine.
########################

#######
Today
#######
---- Open


"Quality means doing it right when no one is looking." 
	-- Henry Ford 


---- Content

International Organization for Standardization (ISO)
https://www.iso-9001-checklist.co.uk/7.5.3-control-of-documented-information-explained.htm
https://www.iso.org/standard/76865.html
https://www.iso.org/standard/80233.html

CFR-2011-title36-vol3-chapXII-subchapB.pdf





Finish Git and GitHub installations


##################
Install Notepad++ (Windows)
Sublime Text (Mac)
##################
https://notepad-plus-plus.org/downloads/
https://www.sublimetext.com/

*Do trial run and save as a 'normal text file' (Windows)
*The file should have a .txt extension
Will need to store GitHub token

[Right-clic to select the text editor]

###############
GitHub Account
GitHub Repository
GitHub Token
################
https://github.com/

Sign up for Github


---GitHub Account
https://docs.github.com/en/get-started/onboarding/getting-started-with-your-github-account

			# https://github.com/
			# create login
				username: <your user name>  (or your non-school email)
				password: <your password> 
			
			#GitHub charges for private repositories!! public repositories can still choose who can 
			commit

---GitHub Repository
https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository

Create Repository

Create Repo Qs
	Name of repo

	Public

	Add README file

	ignore .gitignore

	ignore license

			# Create new repo
	"Initial commit"		<== 'This will set master as the default branch'
		
			


---GitHub Token
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
			# Obtain a authetication token; Fine-grained token
			# use a personal access token in place of a password when authenticating to GitHub 
			from the command line 	
			
		Settings
			==> <> Developer Settings
				==> Personal Access Tokens (use Classic NOT Fine-Grained)
					==> Tokens (Classic)
					
					==> YourToken_#######
					 	Access on @<your username>
						Repository access	This token has access to all repositories owned by you.

					YourToken_###### (never expires)
						==> NEVER put token in a doc to be 'pushed' to the offsite repo (the doc will 
						contain a "secret")
Token Qs					
	no expiration date

	no description required 

	all repositories

	Generate Token
		Classic
	
		Clic all boxes
	
"This token will expire NEVER"



---- [for Fine-Grained Only] ----------------
	Repo Permissions
		"read and write" for all (or "read")
	 
	Overview
		"read and write" for all (or "read")
-----------------------------------------------

####################
Open Reference Docs
#####################
ProGit Manual 2nd Ed.
git_usage_Windows.txt
Windows_Install_Git_LinuxUtilities.pdf


###########
Installing Git
##############
1.4 Getting Started - The Command Line
https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line

1.5 Getting Started - Installing Git
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

NB. for help with any git command
$ git help <command>


See "git_usage_Windows.txt" 	(start line 22)
See "Windows_Install_Git_LinuxUtilities.pdf" 


#########
Windows
"install git windows"	<== Google
#########
https://git-scm.com/download/win <== download will start automatically
	Git-2.48.1-64-bit.exe 		<== auto download for Windows machines
https://gitforwindows.org


#######
Mac-OS
"install git mac"	<== Google
#####
open Terminal
Click the Launchpad icon in the Dock, type Terminal in the search field, then click Terminal.
pin Terminal to toolbar


https://git-scm.com/downloads/mac
Install Homebrew if you don't already have it, then:

$ brew install git


Git installation window opens
	GNU General Public License
	Git Install Qs
		let Git Decide

		Use bundled OpenSSH

		Use Native Windows Secure Channel Library

		Checkout as-is, Commit as-is

		Use MinTTY

		Fast forward or Merge

		Git Credential Manager

		Enable file system caching

		Launch Git BASH [a Linux-style BASH screen]		<== pin to toolbar
	




##############
General Info:
Repositories

##############

Each 'repository' composed of an onsite repository and its offsite repository (image)

Must have:
	*an onsite repository setup by keying a compu folder with a (hidden) /.git subfolder  

	*an offsite repository in GitHub (https://github.com/) already setup
		-- follow GitHub instructions for new repository setup
		


#########################################
Onsite Git repository set up AND 
synch to Offsite Github repo
(p 44 ProGit Manual)
##########################################
See " git_usage_Windows.txt" (start line 84)

	# open yout GitHub acct and copy the URL of your newly-created repository
	# create a new folder on your desktop to house your GitHub (cloned) repo
	
	# Right-clic to open Git BASH terminal in the new folder you just created (Windows)
	# Go to the new folder you just created and open a Terminal (Mac)
	# type the following git command in the terminal

$ git clone <your Github URL>

	# after cloning complete close the Bash terminal (Windows) or Terminal (Mac)
	# open the newly-cloned folder, which has the name of your repo and contains a README.md file, and open a new BASH terminal (Windows) or Terminal (Mac) HERE (ie inside the git-tracked repo folder)
	# check the repo by typing the following git commands in the terminal(p.69 ProGit2)

$ git remote -v
$ git remote show origin



###########################
General Git (local) set-up
(p 39 ProGit Manual)
###########################

$ git config --list		#if on a new compu, this returns nothing

==== configure global settings =========================================
	a. '--global' stores in .gitconfig (a hidden file)
	a1. set these globals (username MUST match GitHub username)

$ git config --global user.name "<your user name>" &&
git config --global user.email "<your email>" &&
git config --global core.editor "notepad++"&&
git config --global http.sslVerify false &&
git config --global alias.visual '!gitk'&&
git config --global alias.last 'log -1 HEAD'

$ git config --list

NOTES
	git config --global user.name "<your user name>"	<==Github user name
	git config --global user.email "<your email>" 		<== Github email
	git config --global core.editor "notepad++"
	git config --global alias.visual '!gitk'			<== gitk is a GUI
	git config --global alias.last 'log -1 HEAD'		<== see last commit

the ! in !gitk indicates that the git alias is accessing a regular shell command instead of a git subcommand, and it also causes git to execute this shell command in the root directory of the git repository instead of in the directory you are currently in

Options for Mac
*	$ git visual

*	git config --global alias.visual 'gitk'

*	git config --global alias.visual 'log --oneline --decorate --graph --all'
	$ git log
	
	
#########################################
Learn the git workflow
track || stage || commit || push
##########################################


	a. the git file processing sequence:

new file			track	==>stage	==>commit	==>push
modified file				==>stage	==>commit	==>push




#########################################
Manually dump in additional subdirectories and files
Make changes to existing files
track || stage || commit || push
(p. 43 ProGit Manual)
##########################################

	# copy in additional subdirectories and files to your git-tracked repo (folder)
	# e.g, store your dictionary in the git-tracked repo
 
	
	# to show files and their status 
$ git status

	# to TRACK and STAGE all files!!!
$ git add --all
$ git status

	# to COMMIT all files
$ git commit -a -m "<date>"		<== add any message you would like; date is recommended
 
 	# to PUSH all changed files to your offsite repo in GitHub (aka 'origin' bc you cloned the repo)) 
$ git push origin --all		<== enter your GitHub login name
							<== enter your GitHub token
$ git status
On branch master
Your branch is up to date with 'origin/master'.
nothing to commit, working tree clean

	# to SEE all the file changes and their history
$ gitk







---- Work Time

HW_04.1	[Due: 25 Feb 2025]
Write How-To Guides in Spanish for 
	1) Installation of Notepad++ on Windows
	2) Setting up a GitHub account, obtaining a security token, and creating a repository
	3) Installation of Git on Windows (Mac)
	








